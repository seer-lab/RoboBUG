<level>
<description>The Robot Priority-Targeting System has a new bug.
Set &lt;color=#ff0000ff&gt;BREAKPOINTS&lt;/color&gt; to check the state of the variables.
&lt;color=#ffff00ff&gt;ACTIVATE&lt;/color&gt; the &lt;color=#ff0000ff&gt;BREAKPOINTS&lt;/color&gt; to observe behavior.
Identify the bug before you &lt;color=#ff00ffff&gt;WARP&lt;/color&gt; to the calculation function.
Use the BUGCATCHER to identify the incorrect calculation.</description>
<nextlevel>level4.xml</nextlevel>
<introtext>A bug has found its way into the Closer() function.
Time to put that &lt;color=#ff0000ff&gt;BREAKPOINTER&lt;/color&gt; tool to use.</introtext>
<endtext>You found it! There's only a single bug left!</endtext>
<time>180</time>
<tools>
<enabled count="9">1</enabled>
<enabled count="3">4</enabled>
</tools>
<code>struct target{
    string name[30];
    int x, y;
};

//Robot Targeting Systems Prioritizer
//Uses Closer function to calculate Closest target
//targets[] ts contains a list of 3 targets
//returns the closest target
target FirstPriority(targets[] ts){

    target t1 = ts[0];
    target t2 = ts[1];
    target t3 = ts[2];
    <breakpoint text="t1.x = 10, t1.y = 40
t2.x = 75, t2.y = 50
t3.x = 255, t3.y = 75"></breakpoint>target closest = Closer(t1,t2);
    <breakpoint text="t1.x = 75, t1.y = 40
t2.x = 75, t2.y = 50
t3.x = 255, t3.y = 75
closest = t2"></breakpoint>closest = Closer(closest,t3);
    <breakpoint text="t1.x = 75, t1.y = 40
t2.x = 255, t2.y = 50
t3.x = 255, t3.y = 75
closest = t3" tool="0,0,1,0,0,0"></breakpoint>return closest;
}
<warp file="L4cCloser.xml" tool="1,0,0,0,0,0">target Closer(target t1, target t2);
</warp>
</code>
</level>